Q1. When we keep different handlers, the two major features are:
	- Each handler is able to push its trap_no, so it can be easily handled in trap_dispatch function.
	- Error code is added by the CPU for some interupts which tell the kernel on how to handle these interrupts based on error code. So, the trapframe is kept identical for each handler by keeping different handler function, as we can easily put 0x0 for those which don't require error code.

	So, if we use one handler function for all the interupts, then
	- We will not be able to push different trap_no for each exception, and then our trap_dispatch function will become more complicated(to identify what has caused the interrupt).
	- And, to keep the trapframe identical, we will have to make handlers complicated to determine whether or not to push 0x0 for the error code.

Q2. I had to set dpl in SETGATE macro to 0 for softint to behave correctly. 
	- It produced interrupt vector 13 as the user has called interrupt vector 14 in the softint file, but since the dpl is set to 0, permission to access interrupt vector 14 is not given to the user. This generates general protection fault which corresponds to interrupt vector 13.
	- If kernel allows the softint's int $14 to access kernel's page fault handler, then user will be able to allocate pages if lazy allocation of memory is allowed. Also, user can be able to allocate a page which is already allocated. So, this will lead to a problem.

Q3. Break point test case will either generate a break point exception or a general protection fault depending on how we 	 set the dpl bit in the SETGATE macro.
	i.e. if dpl is 0, it will generate a general protection fault(int $13) as the user, then will not have the permission to call int $3.
	and if dpl is 3, it will generate breakpoint exception as now the user has the permission to call int $3.
	- So, due to above reason, we need to set dpl bit to 3 in order to allow the user to call the breakpoint exception.
	(i.e. work as specified in the lab document)
	- If we set dpl bit to 0 in the SETGATE Macro for this handler, then it will trigger general protection fault due to above reason.

Q4. The point of these mechanisms(i.e. setting dpf bit differently for different handlers) is to allow different 	   permission to user for different handlers . e.g. For system call, we want to give user permission to generate int $48 for system call, but on the other hand, we don't want user to call page fault handler. Therfore, we need different permissions for different interupts.(dpl=3 for system calls and dpl=0 for page fault).
In particular to what softint does, this mechanism is useful as we don't want the user to allow to call kernel's page fault handler by int $14 because if we allow the user to do so, it can allocate pre-allocated pages from the memory if lazy allocation is allowed, which would be malicious.
Therefore, such mechanism is required to ensure protection.

Short description about the learning from this lab:
1. We need to change the page directory from kern_pgdir to env_pgdir at the time of loading of elf binary for the user environment.
2. I also learned to code in assembly file(for trapentry.S).
And also learned about how to use macros and how the compiler creates symbols for different functions.
3. I also learned that we need to check the arguements of the syscall generated by the user, as the user is able to pass pointers to kernel as arguements to system call. Therefore, if we don't check if the user has access to that memory, then user can read kernel's data and other processes data.

Description about Challenge problem 1:

I created an array of handlers in trapentry.S file. 
The array contained alternate entries corresponding to the trap_no(i.e even entries) and odd entries of the array contained addresses of the handlers. For this, 
- I used .globl directive, since array needed to be global in order to use it in trap.c
- I used .data directive as aray corresponds to a data section
- and used .long directive(as the num and name are 32 bit entries) to push num and name into this table.
Then, in trap.c file, i used a single loop to iterate over all 256 entries of idt.
-If the idt entry no. matched with the entry in my array, I push the next entry in my array(which is the address of the handler for the matched entry) into the idt at the index given by loop counter.
	- In this case, i incremented the pointer pointing to my array by 2 so that it now points to next trap_no which I need to add in idt.
-If idt entry didn't match with the entry in the array, then I pushed the address of the default handler in the idt.
This shortened the repeated code written in trap.c.